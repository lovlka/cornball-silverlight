//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 

using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;

namespace Cornball.Statistics
{
    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DataItem", Namespace = "http://lantisen.stodell.se/")]
    public class DataItem : object, INotifyPropertyChanged
    {
        private string NameField;

        private int ValueField;

        [DataMember]
        public string Name
        {
            get { return NameField; }
            set
            {
                if ((ReferenceEquals(NameField, value) != true))
                {
                    NameField = value;
                    RaisePropertyChanged("Name");
                }
            }
        }

        [DataMember]
        public int Value
        {
            get { return ValueField; }
            set
            {
                if ((ValueField.Equals(value) != true))
                {
                    ValueField = value;
                    RaisePropertyChanged("Value");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(Namespace = "http://lantisen.stodell.se/", ConfigurationName = "Statistics.Statistics")]
    public interface Statistics
    {
        [OperationContract(AsyncPattern = true, Action = "http://lantisen.stodell.se/Statistics/IncreaseValue",
            ReplyAction = "http://lantisen.stodell.se/Statistics/IncreaseValueResponse")]
        IAsyncResult BeginIncreaseValue(string name, AsyncCallback callback, object asyncState);

        void EndIncreaseValue(IAsyncResult result);

        [OperationContract(AsyncPattern = true, Action = "http://lantisen.stodell.se/Statistics/GetStatistics",
            ReplyAction = "http://lantisen.stodell.se/Statistics/GetStatisticsResponse")]
        IAsyncResult BeginGetStatistics(AsyncCallback callback, object asyncState);

        ObservableCollection<DataItem> EndGetStatistics(IAsyncResult result);

        [OperationContract(AsyncPattern = true, Action = "http://lantisen.stodell.se/Statistics/SaveHighscore",
            ReplyAction = "http://lantisen.stodell.se/Statistics/SaveHighscoreResponse")]
        IAsyncResult BeginSaveHighscore(string name, int score, AsyncCallback callback, object asyncState);

        void EndSaveHighscore(IAsyncResult result);

        [OperationContract(AsyncPattern = true, Action = "http://lantisen.stodell.se/Statistics/GetHighscores",
            ReplyAction = "http://lantisen.stodell.se/Statistics/GetHighscoresResponse")]
        IAsyncResult BeginGetHighscores(int limit, DateTime? startDate, DateTime? endDate, AsyncCallback callback,
                                        object asyncState);

        ObservableCollection<DataItem> EndGetHighscores(IAsyncResult result);

        [OperationContract(AsyncPattern = true, Action = "http://lantisen.stodell.se/Statistics/IsHighscore",
            ReplyAction = "http://lantisen.stodell.se/Statistics/IsHighscoreResponse")]
        IAsyncResult BeginIsHighscore(int score, int limit, int days, AsyncCallback callback, object asyncState);

        bool EndIsHighscore(IAsyncResult result);
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface StatisticsChannel : Statistics, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public class GetStatisticsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public GetStatisticsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public ObservableCollection<DataItem> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ObservableCollection<DataItem>) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public class GetHighscoresCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public GetHighscoresCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public ObservableCollection<DataItem> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ObservableCollection<DataItem>) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public class IsHighscoreCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public IsHighscoreCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public class StatisticsClient : ClientBase<Statistics>, Statistics
    {
        private BeginOperationDelegate onBeginCloseDelegate;
        private BeginOperationDelegate onBeginGetHighscoresDelegate;
        private BeginOperationDelegate onBeginGetStatisticsDelegate;
        private BeginOperationDelegate onBeginIncreaseValueDelegate;
        private BeginOperationDelegate onBeginIsHighscoreDelegate;
        private BeginOperationDelegate onBeginOpenDelegate;

        private BeginOperationDelegate onBeginSaveHighscoreDelegate;
        private SendOrPostCallback onCloseCompletedDelegate;
        private EndOperationDelegate onEndCloseDelegate;

        private EndOperationDelegate onEndGetHighscoresDelegate;
        private EndOperationDelegate onEndGetStatisticsDelegate;
        private EndOperationDelegate onEndIncreaseValueDelegate;

        private EndOperationDelegate onEndIsHighscoreDelegate;

        private EndOperationDelegate onEndOpenDelegate;
        private EndOperationDelegate onEndSaveHighscoreDelegate;
        private SendOrPostCallback onGetHighscoresCompletedDelegate;
        private SendOrPostCallback onGetStatisticsCompletedDelegate;
        private SendOrPostCallback onIncreaseValueCompletedDelegate;
        private SendOrPostCallback onIsHighscoreCompletedDelegate;

        private SendOrPostCallback onOpenCompletedDelegate;
        private SendOrPostCallback onSaveHighscoreCompletedDelegate;

        public StatisticsClient()
        {
        }

        public StatisticsClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public StatisticsClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public StatisticsClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public StatisticsClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public CookieContainer CookieContainer
        {
            get
            {
                var httpCookieContainerManager = InnerChannel.GetProperty<IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                var httpCookieContainerManager = InnerChannel.GetProperty<IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new InvalidOperationException(
                        "Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
                }
            }
        }

        #region Statistics Members

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult Statistics.BeginIncreaseValue(string name, AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginIncreaseValue(name, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        void Statistics.EndIncreaseValue(IAsyncResult result)
        {
            base.Channel.EndIncreaseValue(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult Statistics.BeginGetStatistics(AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetStatistics(callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        ObservableCollection<DataItem> Statistics.EndGetStatistics(IAsyncResult result)
        {
            return base.Channel.EndGetStatistics(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult Statistics.BeginSaveHighscore(string name, int score, AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSaveHighscore(name, score, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        void Statistics.EndSaveHighscore(IAsyncResult result)
        {
            base.Channel.EndSaveHighscore(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult Statistics.BeginGetHighscores(int limit, DateTime? startDate, DateTime? endDate,
                                                   AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetHighscores(limit, startDate, endDate, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        ObservableCollection<DataItem> Statistics.EndGetHighscores(IAsyncResult result)
        {
            return base.Channel.EndGetHighscores(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult Statistics.BeginIsHighscore(int score, int limit, int days, AsyncCallback callback,
                                                 object asyncState)
        {
            return base.Channel.BeginIsHighscore(score, limit, days, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        bool Statistics.EndIsHighscore(IAsyncResult result)
        {
            return base.Channel.EndIsHighscore(result);
        }

        #endregion

        public event EventHandler<AsyncCompletedEventArgs> IncreaseValueCompleted;

        public event EventHandler<GetStatisticsCompletedEventArgs> GetStatisticsCompleted;

        public event EventHandler<AsyncCompletedEventArgs> SaveHighscoreCompleted;

        public event EventHandler<GetHighscoresCompletedEventArgs> GetHighscoresCompleted;

        public event EventHandler<IsHighscoreCompletedEventArgs> IsHighscoreCompleted;

        public event EventHandler<AsyncCompletedEventArgs> OpenCompleted;

        public event EventHandler<AsyncCompletedEventArgs> CloseCompleted;

        private IAsyncResult OnBeginIncreaseValue(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var name = ((string) (inValues[0]));
            return ((Statistics) (this)).BeginIncreaseValue(name, callback, asyncState);
        }

        private object[] OnEndIncreaseValue(IAsyncResult result)
        {
            ((Statistics) (this)).EndIncreaseValue(result);
            return null;
        }

        private void OnIncreaseValueCompleted(object state)
        {
            if ((IncreaseValueCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                IncreaseValueCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void IncreaseValueAsync(string name)
        {
            IncreaseValueAsync(name, null);
        }

        public void IncreaseValueAsync(string name, object userState)
        {
            if ((onBeginIncreaseValueDelegate == null))
            {
                onBeginIncreaseValueDelegate = OnBeginIncreaseValue;
            }
            if ((onEndIncreaseValueDelegate == null))
            {
                onEndIncreaseValueDelegate = OnEndIncreaseValue;
            }
            if ((onIncreaseValueCompletedDelegate == null))
            {
                onIncreaseValueCompletedDelegate = OnIncreaseValueCompleted;
            }
            base.InvokeAsync(onBeginIncreaseValueDelegate, new object[]
                                                               {
                                                                   name
                                                               }, onEndIncreaseValueDelegate,
                             onIncreaseValueCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginGetStatistics(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((Statistics) (this)).BeginGetStatistics(callback, asyncState);
        }

        private object[] OnEndGetStatistics(IAsyncResult result)
        {
            ObservableCollection<DataItem> retVal = ((Statistics) (this)).EndGetStatistics(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnGetStatisticsCompleted(object state)
        {
            if ((GetStatisticsCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                GetStatisticsCompleted(this,
                                       new GetStatisticsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetStatisticsAsync()
        {
            GetStatisticsAsync(null);
        }

        public void GetStatisticsAsync(object userState)
        {
            if ((onBeginGetStatisticsDelegate == null))
            {
                onBeginGetStatisticsDelegate = OnBeginGetStatistics;
            }
            if ((onEndGetStatisticsDelegate == null))
            {
                onEndGetStatisticsDelegate = OnEndGetStatistics;
            }
            if ((onGetStatisticsCompletedDelegate == null))
            {
                onGetStatisticsCompletedDelegate = OnGetStatisticsCompleted;
            }
            base.InvokeAsync(onBeginGetStatisticsDelegate, null, onEndGetStatisticsDelegate,
                             onGetStatisticsCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginSaveHighscore(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var name = ((string) (inValues[0]));
            var score = ((int) (inValues[1]));
            return ((Statistics) (this)).BeginSaveHighscore(name, score, callback, asyncState);
        }

        private object[] OnEndSaveHighscore(IAsyncResult result)
        {
            ((Statistics) (this)).EndSaveHighscore(result);
            return null;
        }

        private void OnSaveHighscoreCompleted(object state)
        {
            if ((SaveHighscoreCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                SaveHighscoreCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void SaveHighscoreAsync(string name, int score)
        {
            SaveHighscoreAsync(name, score, null);
        }

        public void SaveHighscoreAsync(string name, int score, object userState)
        {
            if ((onBeginSaveHighscoreDelegate == null))
            {
                onBeginSaveHighscoreDelegate = OnBeginSaveHighscore;
            }
            if ((onEndSaveHighscoreDelegate == null))
            {
                onEndSaveHighscoreDelegate = OnEndSaveHighscore;
            }
            if ((onSaveHighscoreCompletedDelegate == null))
            {
                onSaveHighscoreCompletedDelegate = OnSaveHighscoreCompleted;
            }
            base.InvokeAsync(onBeginSaveHighscoreDelegate, new object[]
                                                               {
                                                                   name,
                                                                   score
                                                               }, onEndSaveHighscoreDelegate,
                             onSaveHighscoreCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginGetHighscores(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var limit = ((int) (inValues[0]));
            var startDate = ((DateTime?) (inValues[1]));
            var endDate = ((DateTime?) (inValues[2]));
            return ((Statistics) (this)).BeginGetHighscores(limit, startDate, endDate, callback, asyncState);
        }

        private object[] OnEndGetHighscores(IAsyncResult result)
        {
            ObservableCollection<DataItem> retVal = ((Statistics) (this)).EndGetHighscores(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnGetHighscoresCompleted(object state)
        {
            if ((GetHighscoresCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                GetHighscoresCompleted(this,
                                       new GetHighscoresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetHighscoresAsync(int limit, DateTime? startDate, DateTime? endDate)
        {
            GetHighscoresAsync(limit, startDate, endDate, null);
        }

        public void GetHighscoresAsync(int limit, DateTime? startDate, DateTime? endDate, object userState)
        {
            if ((onBeginGetHighscoresDelegate == null))
            {
                onBeginGetHighscoresDelegate = OnBeginGetHighscores;
            }
            if ((onEndGetHighscoresDelegate == null))
            {
                onEndGetHighscoresDelegate = OnEndGetHighscores;
            }
            if ((onGetHighscoresCompletedDelegate == null))
            {
                onGetHighscoresCompletedDelegate = OnGetHighscoresCompleted;
            }
            base.InvokeAsync(onBeginGetHighscoresDelegate, new object[]
                                                               {
                                                                   limit,
                                                                   startDate,
                                                                   endDate
                                                               }, onEndGetHighscoresDelegate,
                             onGetHighscoresCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginIsHighscore(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var score = ((int) (inValues[0]));
            var limit = ((int) (inValues[1]));
            var days = ((int) (inValues[2]));
            return ((Statistics) (this)).BeginIsHighscore(score, limit, days, callback, asyncState);
        }

        private object[] OnEndIsHighscore(IAsyncResult result)
        {
            bool retVal = ((Statistics) (this)).EndIsHighscore(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnIsHighscoreCompleted(object state)
        {
            if ((IsHighscoreCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                IsHighscoreCompleted(this,
                                     new IsHighscoreCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void IsHighscoreAsync(int score, int limit, int days)
        {
            IsHighscoreAsync(score, limit, days, null);
        }

        public void IsHighscoreAsync(int score, int limit, int days, object userState)
        {
            if ((onBeginIsHighscoreDelegate == null))
            {
                onBeginIsHighscoreDelegate = OnBeginIsHighscore;
            }
            if ((onEndIsHighscoreDelegate == null))
            {
                onEndIsHighscoreDelegate = OnEndIsHighscore;
            }
            if ((onIsHighscoreCompletedDelegate == null))
            {
                onIsHighscoreCompletedDelegate = OnIsHighscoreCompleted;
            }
            base.InvokeAsync(onBeginIsHighscoreDelegate, new object[]
                                                             {
                                                                 score,
                                                                 limit,
                                                                 days
                                                             }, onEndIsHighscoreDelegate, onIsHighscoreCompletedDelegate,
                             userState);
        }

        private IAsyncResult OnBeginOpen(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((OpenCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                OpenCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((onBeginOpenDelegate == null))
            {
                onBeginOpenDelegate = OnBeginOpen;
            }
            if ((onEndOpenDelegate == null))
            {
                onEndOpenDelegate = OnEndOpen;
            }
            if ((onOpenCompletedDelegate == null))
            {
                onOpenCompletedDelegate = OnOpenCompleted;
            }
            base.InvokeAsync(onBeginOpenDelegate, null, onEndOpenDelegate, onOpenCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginClose(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((CloseCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CloseCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((onBeginCloseDelegate == null))
            {
                onBeginCloseDelegate = OnBeginClose;
            }
            if ((onEndCloseDelegate == null))
            {
                onEndCloseDelegate = OnEndClose;
            }
            if ((onCloseCompletedDelegate == null))
            {
                onCloseCompletedDelegate = OnCloseCompleted;
            }
            base.InvokeAsync(onBeginCloseDelegate, null, onEndCloseDelegate, onCloseCompletedDelegate, userState);
        }

        protected override Statistics CreateChannel()
        {
            return new StatisticsClientChannel(this);
        }

        #region Nested type: StatisticsClientChannel

        private class StatisticsClientChannel : ChannelBase<Statistics>, Statistics
        {
            public StatisticsClientChannel(ClientBase<Statistics> client) :
                base(client)
            {
            }

            #region Statistics Members

            public IAsyncResult BeginIncreaseValue(string name, AsyncCallback callback, object asyncState)
            {
                var _args = new object[1];
                _args[0] = name;
                IAsyncResult _result = base.BeginInvoke("IncreaseValue", _args, callback, asyncState);
                return _result;
            }

            public void EndIncreaseValue(IAsyncResult result)
            {
                var _args = new object[0];
                base.EndInvoke("IncreaseValue", _args, result);
            }

            public IAsyncResult BeginGetStatistics(AsyncCallback callback, object asyncState)
            {
                var _args = new object[0];
                IAsyncResult _result = base.BeginInvoke("GetStatistics", _args, callback, asyncState);
                return _result;
            }

            public ObservableCollection<DataItem> EndGetStatistics(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((ObservableCollection<DataItem>) (base.EndInvoke("GetStatistics", _args, result)));
                return _result;
            }

            public IAsyncResult BeginSaveHighscore(string name, int score, AsyncCallback callback, object asyncState)
            {
                var _args = new object[2];
                _args[0] = name;
                _args[1] = score;
                IAsyncResult _result = base.BeginInvoke("SaveHighscore", _args, callback, asyncState);
                return _result;
            }

            public void EndSaveHighscore(IAsyncResult result)
            {
                var _args = new object[0];
                base.EndInvoke("SaveHighscore", _args, result);
            }

            public IAsyncResult BeginGetHighscores(int limit, DateTime? startDate, DateTime? endDate,
                                                   AsyncCallback callback, object asyncState)
            {
                var _args = new object[3];
                _args[0] = limit;
                _args[1] = startDate;
                _args[2] = endDate;
                IAsyncResult _result = base.BeginInvoke("GetHighscores", _args, callback, asyncState);
                return _result;
            }

            public ObservableCollection<DataItem> EndGetHighscores(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((ObservableCollection<DataItem>) (base.EndInvoke("GetHighscores", _args, result)));
                return _result;
            }

            public IAsyncResult BeginIsHighscore(int score, int limit, int days, AsyncCallback callback,
                                                 object asyncState)
            {
                var _args = new object[3];
                _args[0] = score;
                _args[1] = limit;
                _args[2] = days;
                IAsyncResult _result = base.BeginInvoke("IsHighscore", _args, callback, asyncState);
                return _result;
            }

            public bool EndIsHighscore(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((bool) (base.EndInvoke("IsHighscore", _args, result)));
                return _result;
            }

            #endregion
        }

        #endregion
    }
}